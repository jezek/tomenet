# $Id$
# File: makefile.sdl2

#
# This file allows compiling TomeNET SDL2 client binaries for Linux and Windows.
#
# Compiling for linux uses currently clang complier, but can be changet if necessary.
# Compiling for the Windows platform uses the MinGW cross-compiler running on Linux. You must install the MinGW cross compiler first.
# If you want to use tolua.exe for .c files generation from .pkg files, wine must be installed to run the tolua.exe during compilation.
# If wine isn't installed, the generation of .c files from .pkg files will be automatically done by linux native tolua executable.
#
# Also you need to install the headers for SDL2, SDL2_mixer, SDL2_ttf and SDL_net in your (cross) compiling environment.
#
# Flags:
#
#  - USE_SDL2 - Required for all SDL2 clients, uses SDL2, SDL2_mixer, SDL2_ttf and SDL_net libraries.
#    PNG screenshot support additionally requires SDL2_image when available.
#
#  - SOUND_SDL2 - Optional, using SDL2_mixer library and provides SDL sound/music support. Is set as default.
#
#  - SDL2_CURL - Optional, using curl & openssl libraries for guide checks. Default for linux SDL2 client.
#
#  - SDL2_STICKY_KEYS - Optional, enables sticky key emulation logic in the SDL2 client. Disabled by default.
#
#  TODO jezek - windows.
#
#


#
# The SDL2 client "object" files.
#
CLI_OBJS := \
  common/z-util.o common/z-virt.o common/z-form.o common/z-rand.o \
  common/net-sdl2.o common/sockbuf.o common/common.o \
  client/z-term.o client/c-util.o client/c-cmd.o client/c-inven.o \
  client/c-files.o client/c-tables.o client/c-store.o client/c-init.o \
  client/variable.o client/main-sdl2.o client/nclient.o client/client.o \
  client/c-birth.o client/c-xtra1.o client/c-xtra2.o client/c-spell.o \
  client/skills.o common/files.o common/SFMT.o client/snd-sdl2.o \
  common/tables.o common/md5.o

CLI_OBJS_LINUX = $(patsubst %.o, %.linux.o, $(CLI_OBJS))
CLI_OBJS_MINGW = $(patsubst %.o, %.mingw.o, $(CLI_OBJS))

CLI_LUAOBJS := \
  client/c-script.o client/lua_bind.o \
  client/w_player.o client/w_util.o client/w_spells.o

CLI_LUAOBJS_LINUX = $(patsubst %.o, %.linux.o, $(CLI_LUAOBJS))
CLI_LUAOBJS_MINGW = $(patsubst %.o, %.mingw.o, $(CLI_LUAOBJS))

#
# The TOLUA compiler "object" files.
#
# TODO: lua directory should be under common/ and not server/
TOLUAOBJS := \
  server/lua/lapi.o server/lua/lcode.o server/lua/ldebug.o server/lua/ldo.o server/lua/lfunc.o server/lua/lgc.o \
  server/lua/llex.o server/lua/lmem.o server/lua/lobject.o server/lua/lparser.o server/lua/lstate.o server/lua/lstring.o \
  server/lua/ltable.o server/lua/ltests.o server/lua/ltm.o server/lua/lundump.o server/lua/lvm.o server/lua/lzio.o \
  server/lua/lauxlib.o server/lua/lbaselib.o server/lua/ldblib.o server/lua/liolib.o server/lua/lstrlib.o \
  server/lua/tolua_lb.o server/lua/tolua_rg.o server/lua/tolua_tt.o server/lua/tolua_tm.o server/lua/tolua_gp.o \
  server/lua/tolua_eh.o server/lua/tolua_bd.o server/lua/lmathlib.o

TOLUAOBJS_LINUX = $(patsubst %.o, %.linux.o, $(TOLUAOBJS))
TOLUAOBJS_MINGW = $(patsubst %.o, %.mingw.o, $(TOLUAOBJS))

#
# Define files for dependencies.
DEPS_LINUX = $(CLI_OBJS_LINUX:.linux.o=.linux.d) $(CLI_LUAOBJS_LINUX:.linux.o=.linux.d) $(TOLUAOBJS_LINUX:.linux.o=.linux.d)
DEPS_MINGW = $(CLI_OBJS_MINGW:.mingw.o=.mingw.d) $(CLI_LUAOBJS_MINGW:.mingw.o=.mingw.d) $(TOLUAOBJS_MINGW:.mingw.o=.mingw.d)
DEPS = $(DEPS_LINUX) $(DEPS_MINGW)
# Include existing .d files. The "-include" suppresses error when files are missing.
-include $(DEPS)


# Following are some "system" definitions
#
# No changes are needed to compile a version that will run on
# SDL2, in debugging mode, with maximal warnings, on many
# normal Unix machines.
#
# To use an "alternative" definition, simply "modify" (or "replace")
# the definition below with one that you like.  For example, you can
# change the compiler to "cc", or remove the "debugging" options, or
# remove the sound or guide check support, etc, as desired.
#
# See also "config.h" and "h-config.h" for important information.
#
# Some "examples" are given below, they can be used by simply
# removing the FIRST column of "#" signs from the "block" of lines
# you wish to use, and commenting out "standard" block below.
#
# This is not intended to be a "good" Makefile, just a "simple" one.
#


#
# MinGW toolchain target name for cross compiling to windows
#
# You many need to change this depending on your setup.
MINGW_TARGET ?= i686-w64-mingw32


#
# Default C compiler for client, tolua, preproc and object files
#
CC_LINUX ?= clang
CC_MINGW ?= $(MINGW_TARGET)-gcc


#
# Binaries for generating configurating flags and libraries.
#
PKG_CONFIG_LINUX ?= pkg-config
SDL_CONFIG_LINUX ?= sdl2-config
PKG_CONFIG_MINGW ?= $(MINGW_TARGET)-pkg-config
SDL_CONFIG_MINGW ?= /usr/$(MINGW_TARGET)/bin/sdl2-config


#
# Common flags and libraries.
#
COMMON_FLAGS_LINUX := -std=c99 -pipe -Wall -fPIE -fsigned-char -DMEXP=19937 -D_XOPEN_SOURCE -D_BSD_SOURCE -D_DEFAULT_SOURCE -Iserver -Iserver/lua
COMMON_FLAGS_MINGW := -flto=auto -Wall -DMEXP=19937 -std=c99 -DWINVER=0x0501 -DMINGW -Iserver -Iserver/lua

#
# Sound flags and libraries
#
FLAGS_SDL2_SOUND_LINUX := -DSOUND_SDL2
LIBS_SDL2_SOUND_LINUX := -lSDL2_mixer
FLAGS_SDL2_SOUND_MINGW := -DSOUND_SDL2
LIBS_SDL2_SOUND_MINGW := -lSDL2_mixer

# Check for SDL2_image library and set flags accordingly
SDL2_IMAGE_LINUX ?= $(shell $(PKG_CONFIG_LINUX) --exists SDL2_image && echo yes)
SDL2_IMAGE_MINGW ?= $(shell $(PKG_CONFIG_MINGW) --exists SDL2_image && echo yes)
ifeq ($(SDL2_IMAGE_LINUX),yes)
	FLAGS_SDL2_IMAGE_LINUX := -DSDL2_IMAGE
  LIBS_SDL2_IMAGE_LINUX := -lSDL2_image
else
  $(warning Warning: SDL2_image library for linux not found, PNG screenshot support disabled)
endif
ifeq ($(SDL2_IMAGE_MINGW),yes)
  FLAGS_SDL2_IMAGE_MINGW := -DSDL2_IMAGE
  LIBS_SDL2_IMAGE_MINGW := -lSDL2_image
else
  $(warning Warning: SDL2_image library for mingw not found, PNG screenshot support disabled)
endif

# Check for libarchive library for extracting audio packs
LIBARCHIVE_LINUX ?= $(shell $(PKG_CONFIG_LINUX) --exists libarchive && echo yes)
LIBARCHIVE_MINGW ?= $(shell $(PKG_CONFIG_MINGW) --exists libarchive && echo yes)
ifeq ($(LIBARCHIVE_LINUX),yes)
  FLAGS_LIBARCHIVE_LINUX := -DSDL2_ARCHIVE
  LIBS_LIBARCHIVE_LINUX := -larchive
else
  $(warning Warning: libarchive library for linux not found, 7z support disabled)
endif
ifeq ($(LIBARCHIVE_MINGW),yes)
  FLAGS_LIBARCHIVE_MINGW := -DSDL2_ARCHIVE
  LIBS_LIBARCHIVE_MINGW := -larchive
else
  $(warning Warning: libarchive library for mingw not found, 7z support disabled)
endif


#TODO jezek - figure out how.
#
# Check for libcurl and openssl libraries and set flags according.
#
#CURL_LDFLAGS = $(shell $(PKG_CONFIG) --libs libcurl 2>/dev/null)
#SSL_LDFLAGS = $(shell $(PKG_CONFIG) --libs openssl 2>/dev/null)
#ifneq ($(and $(CURL_LDFLAGS), $(SSL_LDFLAGS)),)
#  COMMON_FLAGS_LINUX += -DSDL2_CURL_SSL
#  LIBS += $(CURL_LDFLAGS) $(SSL_LDFLAGS)
#else
#  ifeq ($(CURL_LDFLAGS),)
#    $(warning Warning: libcurl not found, SDL2_CURL_SSL will not be enabled)
#  endif
#  ifeq ($(SSL_LDFLAGS),)
#    $(warning Warning: openssl not found, SDL2_CURL_SSL will not be enabled)
#  endif
#endif


#TODO jezek - figure out how.
#
# Some Linux distributions have a separate libtinfo, attempt to detect it
#
#HAVE_TINFO = $(shell ldconfig -p | grep -c libtinfo)
#ifneq (${HAVE_TINFO}, 0)
#  LIBS += -ltinfo
#endif


# Optional: Compile with Link Time Optimization (LTO)
#COMMON_FLAGS_LINUX += -flto=auto

# Optional: Catch memory errors with AddressSanitizer
#COMMON_FLAGS_LINUX += -fsanitize=address -fno-omit-frame-pointer

# Optional: Catch bugs with UndefinedBehaviorSanitizer
#COMMON_FLAGS_LINUX += -fsanitize=undefined -fno-omit-frame-pointer

# Reduce warnings
#COMMON_FLAGS_LINUX += -Wno-format-overflow


#
# Lua convertor and flags
#
TOLUA_CC_LINUX = $(CC_LINUX)
TOLUA_LINUX = server/tolua
TOLUA_FLAGS_LINUX = $(COMMON_FLAGS_LINUX)
TOLUA_LIBS_LINUX = -lm
TOLUA_TOLUAOBJS_LINUX = $(TOLUAOBJS_LINUX)

# Detect whether Wine is available on this system
WINE ?= wine
HAVE_WINE := $(if $(shell command -v $(WINE) 2>/dev/null),yes,no)

ifeq ($(HAVE_WINE),yes)
  # Build settings when Wine is present.
  # Use the native MinGW-built tolua.exe under Wine.
  TOLUA_CC_MINGW = $(CC_MINGW)
  TOLUA_MINGW = server/tolua.exe
  TOLUA_FLAGS_MINGW = $(COMMON_FLAGS_MINGW)
  TOLUA_LIBS_MINGW =
  TOLUA_TOLUAOBJS_MINGW = $(TOLUAOBJS_MINGW)
else
  # Fallback: build with the Linux-hosted tolua binary.
  TOLUA_CC_MINGW = $(TOLUA_CC_LINUX)
  TOLUA_MINGW = $(TOLUA_LINUX).linux.exe
  TOLUA_FLAGS_MINGW = $(TOLUA_FLAGS_LINUX)
  TOLUA_LIBS_MINGW = $(TOLUA_LIBS_LINUX)
  TOLUA_TOLUAOBJS_MINGW = $(TOLUAOBJS_LINUX)
  WINE =
endif

#
# Default CPP compiler and flags for usage with the preprocessor
#
CPP ?= cpp
CPPFLAGS ?= -x c -E -Wp,-C,-P,-nostdinc,-Wno-format-overflow


#
# Rules
#
all: tomenet tomenet.exe
	@echo Now you need to copy the binaries out of the src directory or run \"make install\".


install: all
	install -b tomenet ..
	install -b tomenet.exe ..


date:
	touch common/common.c


#TODO jezek - Dependency tracking cez -MMD a .d subory
#
# Rules for building the TomeNET SDL2 (test) client
#
tomenet tomenet.test: CFLAGS = -Djezek_t $(COMMON_FLAGS_LINUX) -DUSE_SDL2 $(FLAGS_SDL2_SOUND_LINUX) $(FLAGS_SDL2_IMAGE_LINUX) $(FLAGS_LIBARCHIVE_LINUX) $(shell $(SDL_CONFIG_LINUX) --cflags)
tomenet tomenet.test: LIBS = -lm -lSDL2_ttf -lSDL2_net $(LIBS_SDL2_SOUND_LINUX) $(LIBS_SDL2_IMAGE_LINUX) $(LIBS_LIBARCHIVE_LINUX) $(shell $(SDL_CONFIG_LINUX) --libs)
# Compiler for lient gets additional security hardening flags (linker too)
tomenet: CFLAGS += -fstack-protector -D_FORTIFY_SOURCE=2 -g -O2
tomenet: $(CLI_OBJS_LINUX) $(CLI_LUAOBJS_LINUX) $(TOLUAOBJS_LINUX)
	$(CC_LINUX) $(CFLAGS) -Wl,-z,relro -Wl,-z,now -o tomenet $(CLI_OBJS_LINUX) $(CLI_LUAOBJS_LINUX) $(TOLUAOBJS_LINUX) $(LIBS)

# No security hardening for test client
tomenet.test: CFLAGS += -DTEST_CLIENT -g3 -O0
tomenet.test: CPPFLAGS += -DTEST_CLIENT
tomenet.test: $(CLI_OBJS_LINUX) $(CLI_LUAOBJS_LINUX) $(TOLUAOBJS_LINUX)
	$(CC_LINUX) $(CFLAGS) -o tomenet $(CLI_OBJS_LINUX) $(CLI_LUAOBJS_LINUX) $(TOLUAOBJS_LINUX) $(LIBS)

tomenet.exe tomenet.test.exe: CFLAGS = -Djezek_t $(COMMON_FLAGS_MINGW) -DUSE_SDL2 $(FLAGS_SDL2_SOUND_MINGW) $(FLAGS_SDL2_IMAGE_MINGW) $(FLAGS_LIBARCHIVE_MINGW) $(shell $(SDL_CONFIG_MINGW) --cflags)
tomenet.exe tomenet.test.exe: LIBS = -lregex -lSDL2_ttf -lSDL2_net $(LIBS_SDL2_SOUND_MINGW) $(LIBS_SDL2_IMAGE_MINGW) $(LIBS_LIBARCHIVE_MINGW) $(shell $(SDL_CONFIG_MINGW) --libs)
# Compiler for lient gets additional security hardening flags (linker too)
tomenet.exe: CFLAGS += -D_FORTIFY_SOURCE=2 -O2
tomenet.exe: $(CLI_OBJS_MINGW) $(CLI_LUAOBJS_MINGW) $(TOLUAOBJS_MINGW)
	$(CC_MINGW) $(CFLAGS) -mwindows -o tomenet.exe $(CLI_OBJS_MINGW) $(CLI_LUAOBJS_MINGW) $(TOLUAOBJS_MINGW) $(LIBS)

# No security hardening for test client
tomenet.test.exe: CFLAGS += -DTEST_CLIENT -O0
tomenet.test.exe: CPPFLAGS = -DTEST_CLIENT
tomenet.test.exe: $(CLI_OBJS_MINGW) $(CLI_LUAOBJS_MINGW) $(TOLUAOBJS_MINGW)
	$(CC_MINGW) $(CFLAGS) -mwindows -o tomenet.exe $(CLI_OBJS_MINGW) $(CLI_LUAOBJS_MINGW) $(TOLUAOBJS_MINGW) $(LIBS)

#
# Rules for building the tolua convertor
#
$(TOLUA_LINUX): CFLAGS = -Djezek_tl $(TOLUA_FLAGS_LINUX)
$(TOLUA_LINUX): LIBS = $(TOLUA_LIBS_LINUX)
$(TOLUA_LINUX): $(TOLUA_TOLUAOBJS_LINUX) server/lua/tolua.c server/lua/tolualua.c
	$(TOLUA_CC_LINUX) $(CFLAGS) -o $@ $(TOLUA_TOLUAOBJS_LINUX) server/lua/tolua.c server/lua/tolualua.c $(LIBS)

$(TOLUA_MINGW): CFLAGS = -Djezek_tl $(TOLUA_FLAGS_MINGW)
$(TOLUA_MINGW): LIBS = $(TOLUA_LIBS_MINGW)
$(TOLUA_MINGW): $(TOLUA_TOLUAOBJS_MINGW) server/lua/tolua.c server/lua/tolualua.c
	$(TOLUA_CC_MINGW) $(CFLAGS) -o $@ $(TOLUA_TOLUAOBJS_MINGW) server/lua/tolua.c server/lua/tolualua.c $(LIBS)

#
# Rules for building the custom LUA preprocessor
#
preproc/preproc: CFLAGS = -Djezek_pp
preproc/preproc: preproc/preproc.linux.o
	$(CC_LINUX) $(CFLAGS) -o preproc/preproc preproc/preproc.linux.o
preproc/preproc.linux.o: preproc/preproc.c
	$(CC_LINUX) $(CFLAGS) -o preproc/preproc.linux.o -c preproc/preproc.c


##
## Rules for making a "object" ('.o') file for linux and windows
##
%.linux.o: %.c
	$(CC_LINUX) $(CFLAGS) -MMD -MP -o $@ -c $<
%.linux.o: %.linux.c
	$(CC_LINUX) $(CFLAGS) -MMD -MP -o $@ -c $<

%.mingw.o: %.c
	$(CC_MINGW) $(CFLAGS) -MMD -MP -o $@ -c $<
%.mingw.o: %.mingw.c
	$(CC_MINGW) $(CFLAGS) -MMD -MP -o $@ -c $<

#
# Lua library compilation rules
#
# List of .pkg files to generate from .pre files for use in the client (in format [server|client]/<name>.pre).
# The .pkg files are then used to generate .c files (in format [server|client]/w_<name>.[linux|mingw].c).
PKG_FILES = client/util.pkg client/player.pkg client/spells.pkg

# Use preprocessor with CPP to generate the <dir>/<name>.pkg files from <dir>/<name>.pre files.
$(PKG_FILES): %.pkg: %.pre preproc/preproc
	cd $(dir $@); ../preproc/preproc $(notdir $<) $(notdir $@) $(CPP) $(CPPFLAGS); cd ..

# Use TOLUA_LINUX to generate client/w_<name>.linux.c files from client/<name>.pkg files.
client/w_%.linux.c: client/%.pkg $(TOLUA_LINUX)
	cd $(dir $@);  ../$(TOLUA_LINUX) -n $(basename $(notdir $<)) -o $(notdir $@) $(notdir $<); cd ..

# Use TOLUA_MINGW to generate client/w_<name>.mingw.c files from client/<name>.pkg files.
client/w_%.mingw.c: client/%.pkg $(TOLUA_MINGW)
	cd $(dir $@);  $(WINE) ../$(TOLUA_MINGW) -n $(basename $(notdir $<)) -o $(notdir $@) $(notdir $<); cd ..


#
# Clean up old junk
#
clean:
	cd server/lua; rm -f *.o *.d
	cd server; rm -f *.o *.d w_player.*c w_util.*c w_spells.*c *.pkg tolua*
	cd client; rm -f *.o *.d w_player.*c w_util.*c w_spells.*c *.pkg
	cd common; rm -f *.o *.d
	cd console; rm -f *.o *.d
	rm -f preproc/preproc.o


#
# Clean and build all
#
re: clean all
