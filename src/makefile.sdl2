# $Id$
# File: makefile.sdl2

#
# This file allows compiling TomeNET binaries for Linux and Windows.
#
# Compiling for the Windows platform is using the MinGW cross-compiler running on Linux. You must install the MinGW cross compiler first.
# If you want to use tolua.exe for .mingw.c file generation from .pkg files, wine must be installed to run the tolua.exe during compilation.
# TODO jezek - Add flag to use wine & tolua.exe.
#
# Also you need to install the headers for SDL2, SDL_mixer, SDL_ttf and SDL_net in your (cross) compiling environment.
#
# Flags:
#
#  - USE_SDL2 - Required for all SDL2 clients, uses SDL2, SDL2_ttf and SDL2_image libraries. Is set as default.
#
#  - SOUND_SDL - Optional, using SDL2_mixer library and provides SDL sound/music support. Is set as default.
#
#  - SDL2_CURL - Optional, using curl & openssl libraries for guide checks. Default for linux SDL2 client.
#  TODO jezek - windows.
#
#  TODO jezek - sticky keys, tiles cache
#
#


#
# The SDL2 client "object" files.
#
CLI_OBJS = \
  common/z-util.o common/z-virt.o common/z-form.o common/z-rand.o \
  common/net-sdl2.o common/sockbuf.o common/common.o \
  client/z-term.o client/c-util.o client/c-cmd.o client/c-inven.o \
  client/c-files.o client/c-tables.o client/c-store.o client/c-init.o \
  client/variable.o client/main-sdl2.o client/nclient.o client/client.o \
  client/c-birth.o client/c-xtra1.o client/c-xtra2.o client/c-spell.o \
  client/skills.o common/files.o common/SFMT.o client/snd-sdl.o \
  common/tables.o common/md5.o

CLI_OBJS_LINUX = $(patsubst %.o, %.linux.o, $(CLI_OBJS))
CLI_OBJS_MINGW = $(patsubst %.o, %.mingw.o, $(CLI_OBJS))

CLI_LUAOBJS = \
  client/c-script.o client/lua_bind.o \
  client/w_play.o client/w_util.o client/w_spells.o

CLI_LUAOBJS_LINUX = $(patsubst %.o, %.linux.o, $(CLI_LUAOBJS))
CLI_LUAOBJS_MINGW = $(patsubst %.o, %.mingw.o, $(CLI_LUAOBJS))

#
# The TOLUA compiler "object" files.
#
# TODO: lua directory should be under common/ and not server/
TOLUAOBJS = \
  server/lua/lapi.o server/lua/lcode.o server/lua/ldebug.o server/lua/ldo.o server/lua/lfunc.o server/lua/lgc.o \
  server/lua/llex.o server/lua/lmem.o server/lua/lobject.o server/lua/lparser.o server/lua/lstate.o server/lua/lstring.o \
  server/lua/ltable.o server/lua/ltests.o server/lua/ltm.o server/lua/lundump.o server/lua/lvm.o server/lua/lzio.o \
  server/lua/lauxlib.o server/lua/lbaselib.o server/lua/ldblib.o server/lua/liolib.o server/lua/lstrlib.o \
  server/lua/tolua_lb.o server/lua/tolua_rg.o server/lua/tolua_tt.o server/lua/tolua_tm.o server/lua/tolua_gp.o \
  server/lua/tolua_eh.o server/lua/tolua_bd.o server/lua/lmathlib.o

TOLUAOBJS_LINUX = $(patsubst %.o, %.linux.o, $(TOLUAOBJS))
TOLUAOBJS_MINGW = $(patsubst %.o, %.mingw.o, $(TOLUAOBJS))

#
# Following are some "system" definitions
#
# No changes are needed to compile a version that will run on
# SDL2, in debugging mode, with maximal warnings, on many
# normal Unix machines.
#
# To use an "alternative" definition, simply "modify" (or "replace")
# the definition below with one that you like.  For example, you can
# change the compiler to "cc", or remove the "debugging" options, or
# remove the sound or guide check support, etc, as desired.
#
# See also "config.h" and "h-config.h" for important information.
#
# Some "examples" are given below, they can be used by simply
# removing the FIRST column of "#" signs from the "block" of lines
# you wish to use, and commenting out "standard" block below.
#
# This is not intended to be a "good" Makefile, just a "simple" one.
#


#
# MinGW toolchain target name for cross compiling to windows
#
# You many need to change this depending on your setup.
MINGW_TARGET = i686-w64-mingw32


#
# Default C compiler for client, tolua, preproc and object files
#
CC_LINUX = clang
CC_MINGW = $(MINGW_TARGET)-gcc


#
# Binaries for generating configurating flags and libraries.
#
PKG_CONFIG_LINUX = pkg-config
SDL_CONFIG_LINUX = sdl2-config
PKG_CONFIG_MINGW = $(MINGW_TARGET)-pkg-config
SDL_CONFIG_MINGW = /usr/$(MINGW_TARGET)/bin/sdl2-config


#
# Common flags and libraries.
#
COMMON_FLAGS_LINUX = -std=c99 -pipe -Wall -fPIE -fsigned-char -DMEXP=19937 -D_XOPEN_SOURCE -D_BSD_SOURCE -D_DEFAULT_SOURCE -Iserver -Iserver/lua
COMMON_FLAGS_MINGW = -flto=auto -Wall -DMEXP=19937 -std=c99 -DWINVER=0x0501 -DMINGW -Iserver -Iserver/lua


#TODO jezek - figure out how.
#
# Check for libcurl and openssl libraries and set flags according.
#
#CURL_LDFLAGS = $(shell $(PKG_CONFIG) --libs libcurl 2>/dev/null)
#SSL_LDFLAGS = $(shell $(PKG_CONFIG) --libs openssl 2>/dev/null)
#ifneq ($(and $(CURL_LDFLAGS), $(SSL_LDFLAGS)),)
#  COMMON_FLAGS_LINUX += -DSDL2_CURL_SSL
#  LIBS += $(CURL_LDFLAGS) $(SSL_LDFLAGS)
#else
#  ifeq ($(CURL_LDFLAGS),)
#    $(warning Warning: libcurl not found, SDL2_CURL_SSL will not be enabled)
#  endif
#  ifeq ($(SSL_LDFLAGS),)
#    $(warning Warning: openssl not found, SDL2_CURL_SSL will not be enabled)
#  endif
#endif


#TODO jezek - figure out how.
#
# Some Linux distributions have a separate libtinfo, attempt to detect it
#
#HAVE_TINFO = $(shell ldconfig -p | grep -c libtinfo)
#ifneq (${HAVE_TINFO}, 0)
#  LIBS += -ltinfo
#endif


# Optional: Compile with Link Time Optimization (LTO)
#COMMON_FLAGS_LINUX += -flto=auto

# Optional: Catch memory errors with AddressSanitizer
#COMMON_FLAGS_LINUX += -fsanitize=address -fno-omit-frame-pointer

# Optional: Catch bugs with UndefinedBehaviorSanitizer
#COMMON_FLAGS_LINUX += -fsanitize=undefined -fno-omit-frame-pointer

# Reduce warnings
#COMMON_FLAGS_LINUX += -Wno-format-overflow


#
# Lua convertor and flags
#
TOLUA_CC_LINUX = $(CC_LINUX)
TOLUA_LINUX = server/tolua
TOLUA_FLAGS_LINUX = $(COMMON_FLAGS_LINUX)
TOLUA_LIBS_LINUX = -lm
TOLUA_TOLUAOBJS_LINUX= $(TOLUAOBJS_LINUX)

# No need to use wine and tolua.exe to generate the .mingw.c files from .pkg files..
#TOLUA_CC_MINGW = $(CC_MINGW)
#TOLUA_MINGW = server/tolua.exe
#TOLUA_FLAGS_MINGW = $(COMMON_FLAGS_MINGW)
#TOLUA_LIBS_MINGW =
#TOLUA_TOLUAOBJS_MINGW = $(TOLUAOBJS_MINGW)
#WINE = wine
TOLUA_CC_MINGW = $(TOLUA_CC_LINUX)
TOLUA_MINGW = $(TOLUA_LINUX).linux.exe
TOLUA_FLAGS_MINGW = $(TOLUA_FLAGS_LINUX)
TOLUA_LIBS_MINGW= $(TOLUA_LIBS_LINUX)
TOLUA_TOLUAOBJS_MINGW = $(TOLUAOBJS_LINUX)
WINE =


#
# Default CPP compiler and flags for usage with the preprocessor
#
CPP = cpp
CPPFLAGS = -x c -E -Wp,-C,-P,-nostdinc,-Wno-format-overflow


#
# Rules
#
all: tomenet tomenet.exe
	@echo Now you need to copy the binaries out of the src directory or run \"make install\".


install: all
	install -b tomenet ..
	install -b tomenet.exe ..


date:
	touch common/common.c


#TODO jezek - Dependency tracking cez -MMD a .d subory
#
# Rules for building the TomeNET SDL2 (test) client
#
tomenet tomenet.test: CFLAGS = -Djezek_t $(COMMON_FLAGS_LINUX) -DUSE_SDL2 -DSOUND_SDL $(shell $(SDL_CONFIG_LINUX) --cflags)
tomenet tomenet.test: LIBS = -lm -lSDL2_mixer -lSDL2_ttf -lSDL2_net -lSDL2_image $(shell $(SDL_CONFIG_LINUX) --libs)
# Compiler for lient gets additional security hardening flags (linker too)
tomenet: CFLAGS += -fstack-protector -D_FORTIFY_SOURCE=2 -g -O2
tomenet: $(CLI_OBJS_LINUX) $(CLI_LUAOBJS_LINUX) $(TOLUAOBJS_LINUX)
	$(CC_LINUX) $(CFLAGS) -Wl,-z,relro -Wl,-z,now -o tomenet $(CLI_OBJS_LINUX) $(CLI_LUAOBJS_LINUX) $(TOLUAOBJS_LINUX) $(LIBS)

# No security hardening for test client
tomenet.test: CFLAGS += -DTEST_CLIENT -g3 -O0
tomenet.test: CPPFLAGS += -DTEST_CLIENT
tomenet.test: $(CLI_OBJS_LINUX) $(CLI_LUAOBJS_LINUX) $(TOLUAOBJS_LINUX)
	$(CC_LINUX) $(CFLAGS) -o tomenet $(CLI_OBJS_LINUX) $(CLI_LUAOBJS_LINUX) $(TOLUAOBJS_LINUX) $(LIBS)

tomenet.exe tomenet.test.exe: CFLAGS = -Djezek_t $(COMMON_FLAGS_MINGW) -DUSE_SDL2 -DSOUND_SDL $(shell $(SDL_CONFIG_MINGW) --cflags)
tomenet.exe tomenet.test.exe: LIBS = -lregex -lSDL2_mixer -lSDL2_ttf -lSDL2_net -lSDL2_image $(shell $(SDL_CONFIG_MINGW) --libs)
# Compiler for lient gets additional security hardening flags (linker too)
tomenet.exe: CFLAGS += -D_FORTIFY_SOURCE=2 -O2
tomenet.exe: $(CLI_OBJS_MINGW) $(CLI_LUAOBJS_MINGW) $(TOLUAOBJS_MINGW)
	$(CC_MINGW) $(CFLAGS) -mwindows -o tomenet.exe $(CLI_OBJS_MINGW) $(CLI_LUAOBJS_MINGW) $(TOLUAOBJS_MINGW) $(LIBS)

# No security hardening for test client
tomenet.test.exe: CFLAGS += -DTEST_CLIENT -O0
tomenet.test.exe: CPPFLAGS = -DTEST_CLIENT
tomenet.test.exe: $(CLI_OBJS_MINGW) $(CLI_LUAOBJS_MINGW) $(TOLUAOBJS_MINGW)
	$(CC_MINGW) $(CFLAGS) -mwindows -o tomenet.exe $(CLI_OBJS_MINGW) $(CLI_LUAOBJS_MINGW) $(TOLUAOBJS_MINGW) $(LIBS)

#
# Rules for building the tolua convertor
#
$(TOLUA_LINUX): CFLAGS = -Djezek_tl $(TOLUA_FLAGS_LINUX)
$(TOLUA_LINUX): LIBS = $(TOLUA_LIBS_LINUX)
$(TOLUA_LINUX): $(TOLUA_TOLUAOBJS_LINUX) server/lua/tolua.c server/lua/tolualua.c
	$(TOLUA_CC_LINUX) $(CFLAGS) -o $@ $(TOLUA_TOLUAOBJS_LINUX) server/lua/tolua.c server/lua/tolualua.c $(LIBS)

$(TOLUA_MINGW): CFLAGS = -Djezek_tl $(TOLUA_FLAGS_MINGW)
$(TOLUA_MINGW): LIBS = $(TOLUA_LIBS_MINGW)
$(TOLUA_MINGW): $(TOLUA_TOLUAOBJS_MINGW) server/lua/tolua.c server/lua/tolualua.c
	$(TOLUA_CC_MINGW) $(CFLAGS) -o $@ $(TOLUA_TOLUAOBJS_MINGW) server/lua/tolua.c server/lua/tolualua.c $(LIBS)

#
# Rules for building the custom LUA preprocessor
#
preproc/preproc: CFLAGS = -Djezek_pp
preproc/preproc: preproc/preproc.linux.o
	$(CC_LINUX) $(CFLAGS) -o preproc/preproc preproc/preproc.linux.o
preproc/preproc.linux.o: preproc/preproc.c
	$(CC_LINUX) $(CFLAGS) -o preproc/preproc.linux.o -c preproc/preproc.c


##
## Rules for making a "object" ('.o') file for linux and windows
##
%.linux.o: %.c
	$(CC_LINUX) $(CFLAGS) -o $@ -c $<
%.linux.o: %.linux.c
	$(CC_LINUX) $(CFLAGS) -o $@ -c $<

%.mingw.o: %.c
	$(CC_MINGW) $(CFLAGS) -o $@ -c $<
%.mingw.o: %.mingw.c
	$(CC_MINGW) $(CFLAGS) -o $@ -c $<


#
# Clean up old junk
#
clean:
	cd server/lua; rm -f *.o
	cd server; rm -f *.o w_play.*c w_util.*c w_spells.*c *.pkg
	cd client; rm -f *.o w_play.*c w_util.*c w_spells.*c *.pkg
	cd common; rm -f *.o w_z_pack.c
	cd console; rm -f *.o
	rm -f preproc/preproc.o


#
# Clean a build all
#
re: clean all

#
# Lua library compilation rules
#
# Use preprocessor with CPP to generate .pkg files from .pre
server/util.pkg: server/util.pre preproc/preproc
	cd server; ../preproc/preproc util.pre util.pkg $(CPP) $(CPPFLAGS); cd ..

server/player.pkg: server/player.pre preproc/preproc
	cd server; ../preproc/preproc player.pre player.pkg $(CPP) $(CPPFLAGS); cd ..

server/spells.pkg: server/spells.pre preproc/preproc
	cd server; ../preproc/preproc spells.pre spells.pkg $(CPP) $(CPPFLAGS); cd ..

client/util.pkg: client/util.pre preproc/preproc
	cd client; ../preproc/preproc util.pre util.pkg $(CPP) $(CPPFLAGS); cd ..

client/player.pkg: client/player.pre preproc/preproc
	cd client; ../preproc/preproc player.pre player.pkg $(CPP) $(CPPFLAGS); cd ..

client/spells.pkg: client/spells.pre preproc/preproc
	cd client; ../preproc/preproc spells.pre spells.pkg $(CPP) $(CPPFLAGS); cd ..

# Use TOLUA_LINUX to generate .linux.c files from .pkg
server/w_util.linux.c: server/util.pkg $(TOLUA_LINUX)
	cd server; ../$(TOLUA_LINUX) -n util -o w_util.linux.c util.pkg; cd ..

server/w_play.linux.c: server/player.pkg $(TOLUA_LINUX)
	cd server; ../$(TOLUA_LINUX) -n player -o w_play.linux.c player.pkg; cd ..

server/w_spells.linux.c: server/spells.pkg $(TOLUA_LINUX)
	cd server; ../$(TOLUA_LINUX) -n spells -o w_spells.linux.c spells.pkg; cd ..

common/w_z_pack.linux.c: common/z_pack.pkg $(TOLUA_LINUX)
	cd common; ../$(TOLUA_LINUX) -n z_pack -o w_z_pack.linux.c z_pack.pkg; cd ..

client/w_play.linux.c: client/player.pkg $(TOLUA_LINUX)
	cd client; ../$(TOLUA_LINUX) -n player -o w_play.linux.c player.pkg; cd ..

client/w_util.linux.c: client/util.pkg $(TOLUA_LINUX)
	cd client; ../$(TOLUA_LINUX) -n util -o w_util.linux.c util.pkg; cd ..

client/w_spells.linux.c: client/spells.pkg $(TOLUA_LINUX)
	cd client; ../$(TOLUA_LINUX) -n spells -o w_spells.linux.c spells.pkg; cd ..


# No need to use wine and tolua.exe to generate the .mingw.c files from .pkg files..
# The .mingw.c files are as same as the generated .linux.c files on linux (except newline).
# Use TOLUA_LINUX to generate .mingw.c files from .pkg
#server/w_util.mingw.c: server/util.pkg $(TOLUA_LINUX)
#	cd server; ../$(TOLUA_LINUX) -n util -o w_util.mingw.c util.pkg; cd ..
#
#server/w_play.mingw.c: server/player.pkg $(TOLUA_LINUX)
#	cd server; ../$(TOLUA_LINUX) -n player -o w_play.mingw.c player.pkg; cd ..
#
#server/w_spells.mingw.c: server/spells.pkg $(TOLUA_LINUX)
#	cd server; ../$(TOLUA_LINUX) -n spells -o w_spells.mingw.c spells.pkg; cd ..
#
#common/w_z_pack.mingw.c: common/z_pack.pkg $(TOLUA_LINUX)
#	cd common; ../$(TOLUA_LINUX) -n z_pack -o w_z_pack.mingw.c z_pack.pkg; cd ..
#
#client/w_play.mingw.c: client/player.pkg $(TOLUA_LINUX)
#	cd client; ../$(TOLUA_LINUX) -n player -o w_play.mingw.c player.pkg; cd ..
#
#client/w_util.mingw.c: client/util.pkg $(TOLUA_LINUX)
#	cd client; ../$(TOLUA_LINUX) -n util -o w_util.mingw.c util.pkg; cd ..
#
#client/w_spells.mingw.c: client/spells.pkg $(TOLUA_LINUX)
#	cd client; ../$(TOLUA_LINUX) -n spells -o w_spells.mingw.c spells.pkg; cd ..

# For archival purposes and when to check if the files generated with wine and tolua.exe are same as with tolua on linux.
# Use TOLUA_MINGW to generate .mingw.c files from .pkg
server/w_util.mingw.c: server/util.pkg $(TOLUA_MINGW)
	cd server; $(WINE) ../$(TOLUA_MINGW) -n util -o w_util.mingw.c util.pkg; cd ..

server/w_play.mingw.c: server/player.pkg $(TOLUA_MINGW)
	cd server; $(WINE) ../$(TOLUA_MINGW) -n player -o w_play.mingw.c player.pkg; cd ..

server/w_spells.mingw.c: server/spells.pkg $(TOLUA_MINGW)
	cd server; $(WINE) ../$(TOLUA_MINGW) -n spells -o w_spells.mingw.c spells.pkg; cd ..

common/w_z_pack.mingw.c: common/z_pack.pkg $(TOLUA_MINGW)
	cd common; $(WINE) ../$(TOLUA_MINGW) -n z_pack -o w_z_pack.mingw.c z_pack.pkg; cd ..

client/w_play.mingw.c: client/player.pkg $(TOLUA_MINGW)
	cd client; $(WINE) ../$(TOLUA_MINGW) -n player -o w_play.mingw.c player.pkg; cd ..

client/w_util.mingw.c: client/util.pkg $(TOLUA_MINGW)
	cd client; $(WINE) ../$(TOLUA_MINGW) -n util -o w_util.mingw.c util.pkg; cd ..

client/w_spells.mingw.c: client/spells.pkg $(TOLUA_MINGW)
	cd client; $(WINE) ../$(TOLUA_MINGW) -n spells -o w_spells.mingw.c spells.pkg; cd ..
